{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","lastState","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","initialState","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAoCeA,MAlCf,YAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EACAC,mBAAS,IADT,mBAC7BC,EAD6B,KACjBC,EADiB,KAmBpC,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAI1BR,GAAc,SAAAS,GAAS,OAAKP,GAAL,mBAAoBO,OAC3CN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCKhBG,EATK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACzB,OACI,sBAAKC,UAAU,uCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCSDK,EAdF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNN,EADM,iDAEkCO,UAAUF,GAF5C,+DAGOG,MAAMR,GAHb,cAGNS,EAHM,gBAIWA,EAAKC,OAJhB,uBAIJC,EAJI,EAIJA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAKc,EAAIE,OAAOC,iBAAiBjB,QAT7B,kBAYLY,GAZK,4CAAH,sDC0BEM,EAxBC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECAN,SAACA,GAAa,IAAD,EACXpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAQ,IAHyB,mBAC9BC,EAD8B,KACvBC,EADuB,KAerC,OAVAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GACFH,EAAS,CACLV,KAAKa,EACLL,SAAS,SAGtB,CAACd,IAEGe,EDZwBK,CAAapB,GAAhCW,EAHkB,EAGvBL,KAAaQ,EAHU,EAGVA,QACpB,OACI,mCACI,sBAAKlB,UAAU,YAAf,UACI,oBAAIA,UAAU,kCAAd,SAAiDI,IAChDc,GAAW,wCACPH,EAAOH,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAIQA,GAHCA,EAAIC,aEX/BW,EAAe,CAAC,QAsBPC,EArBM,WAAO,IAAD,EACa1C,mBAASyC,GADtB,mBAChBE,EADgB,KACJ5C,EADI,KAEvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BAGQ4C,EAAWf,KAAI,SAACR,GAAD,OACX,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCX7BwB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a3c83023.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nfunction AddCategory({ setCategories }) {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            //usamos la funcion de callback para poder acceder\r\n            //al ultimo estado de las categories y de esta manera\r\n            //poder meter los nuevos datos en este scope\r\n            setCategories(lastState => [inputValue, ...lastState]);\r\n            setInputValue(\"\");\r\n        }\r\n        \r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__tada\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","//En helpers van a ir todas las funciones auxiliares\r\nconst getGifs = async (category) => {\r\n    const url =\r\n        `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=VRnvBXszWRRU8grF1rzlbWZkOLwZyFgn`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n        };\r\n    });\r\n    return gifs;\r\n};\r\nexport default getGifs;","import React from \"react\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\r\nconst GifGrid = ({ category }) => {\r\n    \r\n    //Hook personalizado\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    return (\r\n        <>\r\n            <div className=\"card-grid\">\r\n                <h3 className=\"animate__animated animate__tada\">{category}</h3>\r\n                {loading && <p>Loading</p>}\r\n                    {images.map((img) => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            //De esta manera enviamos\r\n                            //todas las propiedades individualmente\r\n                            {...img}\r\n                        >\r\n\r\n                        </GifGridItem>\r\n                    ))}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\"\r\nimport getGifs from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = (category) =>{ \r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading:true\r\n    })\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs =>{\r\n                setstate({\r\n                    data:imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n    return state; //{data:[], loading:true}\r\n}","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\nconst initialState = [\"Dogs\"];\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(initialState);\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories}></AddCategory>\r\n            <hr></hr>\r\n            <ol>\r\n                {\r\n                    //Se necesita una expresiÃ³n que retorne algo\r\n                    categories.map((category) => (\r\n                        <GifGrid\r\n                        key={category} \r\n                        category={category}></GifGrid>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp></GifExpertApp>  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}